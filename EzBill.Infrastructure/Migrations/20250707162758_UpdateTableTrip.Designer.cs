// <auto-generated />
using System;
using EzBill.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EzBill.Infrastructure.Migrations
{
    [DbContext(typeof(EzBillDbContext))]
    [Migration("20250707162758_UpdateTableTrip")]
    partial class UpdateTableTrip
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EzBill.Domain.Entity.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccountId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("EzBill.Domain.Entity.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AmountInTripCurrency")
                        .HasColumnType("double precision");

                    b.Property<double>("AmountOriginal")
                        .HasColumnType("double precision");

                    b.Property<char>("Currency")
                        .HasColumnType("character(1)");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("ExchangeRate")
                        .HasColumnType("double precision");

                    b.Property<Guid>("PaidBy")
                        .HasColumnType("uuid");

                    b.Property<string>("ReceiptUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid");

                    b.HasKey("EventId");

                    b.HasIndex("PaidBy");

                    b.HasIndex("TripId");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("EzBill.Domain.Entity.Event_Use", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.HasKey("AccountId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("Event_Use", (string)null);
                });

            modelBuilder.Entity("EzBill.Domain.Entity.PaymentHistory", b =>
                {
                    b.Property<Guid>("PaymentHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("FromAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentUrlBill")
                        .HasColumnType("text");

                    b.Property<Guid?>("RelatedTaxRefundId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaxRefundId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid");

                    b.HasKey("PaymentHistoryId");

                    b.HasIndex("FromAccountId");

                    b.HasIndex("TaxRefundId");

                    b.HasIndex("ToAccountId");

                    b.HasIndex("TripId");

                    b.ToTable("PaymentHistory", (string)null);
                });

            modelBuilder.Entity("EzBill.Domain.Entity.Settlement", b =>
                {
                    b.Property<Guid>("SettlementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("FromAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ToAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid");

                    b.HasKey("SettlementId");

                    b.HasIndex("FromAccountId");

                    b.HasIndex("ToAccountId");

                    b.HasIndex("TripId");

                    b.ToTable("Settlement", (string)null);
                });

            modelBuilder.Entity("EzBill.Domain.Entity.TaxRefund", b =>
                {
                    b.Property<Guid>("TaxRefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsGroupMoneyUsed")
                        .HasColumnType("boolean");

                    b.Property<double>("OriginalAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("RefundAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("RefundPercent")
                        .HasColumnType("double precision");

                    b.Property<Guid>("RefundedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("SplitType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TaxRefundId");

                    b.HasIndex("EventId");

                    b.HasIndex("RefundedBy");

                    b.ToTable("TaxRefund", (string)null);
                });

            modelBuilder.Entity("EzBill.Domain.Entity.TaxRefund_Usage", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaxRefundId")
                        .HasColumnType("uuid");

                    b.Property<double>("AmountReceived")
                        .HasColumnType("double precision");

                    b.Property<double?>("Ratio")
                        .HasColumnType("double precision");

                    b.HasKey("AccountId", "TaxRefundId");

                    b.HasIndex("TaxRefundId");

                    b.ToTable("TaxRefund_Usage", (string)null);
                });

            modelBuilder.Entity("EzBill.Domain.Entity.Trip", b =>
                {
                    b.Property<Guid>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Budget")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("TripName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TripId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Trip", (string)null);
                });

            modelBuilder.Entity("EzBill.Domain.Entity.TripMember", b =>
                {
                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TripId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("TripMember", (string)null);
                });

            modelBuilder.Entity("EzBill.Domain.Entity.Event", b =>
                {
                    b.HasOne("EzBill.Domain.Entity.Account", "Account")
                        .WithMany("Events")
                        .HasForeignKey("PaidBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EVENT_ACCOUNT");

                    b.HasOne("EzBill.Domain.Entity.Trip", "Trip")
                        .WithMany("Events")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TRIP_EVENT");

                    b.Navigation("Account");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("EzBill.Domain.Entity.Event_Use", b =>
                {
                    b.HasOne("EzBill.Domain.Entity.Account", "Account")
                        .WithMany("Event_Use")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EVENT_USE_Account");

                    b.HasOne("EzBill.Domain.Entity.Event", "Event")
                        .WithMany("Event_Use")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EVENT_USE_EVENT");

                    b.Navigation("Account");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EzBill.Domain.Entity.PaymentHistory", b =>
                {
                    b.HasOne("EzBill.Domain.Entity.Account", "FromAccount")
                        .WithMany("PaymentHistoriesFrom")
                        .HasForeignKey("FromAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PaymentHistory_From_Account");

                    b.HasOne("EzBill.Domain.Entity.TaxRefund", "TaxRefund")
                        .WithMany()
                        .HasForeignKey("TaxRefundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EzBill.Domain.Entity.Account", "ToAccount")
                        .WithMany("PaymentHistoriesTo")
                        .HasForeignKey("ToAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PaymentHistory_To_Account");

                    b.HasOne("EzBill.Domain.Entity.Trip", "Trip")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PaymentHistory_Trip");

                    b.Navigation("FromAccount");

                    b.Navigation("TaxRefund");

                    b.Navigation("ToAccount");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("EzBill.Domain.Entity.Settlement", b =>
                {
                    b.HasOne("EzBill.Domain.Entity.Account", "FromAccount")
                        .WithMany("SettlementsFrom")
                        .HasForeignKey("FromAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Settlement_From_Account");

                    b.HasOne("EzBill.Domain.Entity.Account", "ToAccount")
                        .WithMany("SettlementsTo")
                        .HasForeignKey("ToAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Settlement_To_Account");

                    b.HasOne("EzBill.Domain.Entity.Trip", "Trip")
                        .WithMany("Settlements")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Settlement_Trip");

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("EzBill.Domain.Entity.TaxRefund", b =>
                {
                    b.HasOne("EzBill.Domain.Entity.Event", "Event")
                        .WithMany("TaxRefunds")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TaxRefund_Event");

                    b.HasOne("EzBill.Domain.Entity.Account", "Account")
                        .WithMany("TaxRefunds")
                        .HasForeignKey("RefundedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TaxRefund_Account");

                    b.Navigation("Account");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EzBill.Domain.Entity.TaxRefund_Usage", b =>
                {
                    b.HasOne("EzBill.Domain.Entity.Account", "Account")
                        .WithMany("TaxRefund_Usages")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TaxRefund_Usage_Account");

                    b.HasOne("EzBill.Domain.Entity.TaxRefund", "TaxRefund")
                        .WithMany("TaxRefund_Usages")
                        .HasForeignKey("TaxRefundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TaxRefund_Usage_TaxRefund");

                    b.Navigation("Account");

                    b.Navigation("TaxRefund");
                });

            modelBuilder.Entity("EzBill.Domain.Entity.Trip", b =>
                {
                    b.HasOne("EzBill.Domain.Entity.Account", "Account")
                        .WithMany("Trip")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TRIP_ACCOUNT");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("EzBill.Domain.Entity.TripMember", b =>
                {
                    b.HasOne("EzBill.Domain.Entity.Account", "Account")
                        .WithMany("TripMembers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TRIPMEMBER_Account");

                    b.HasOne("EzBill.Domain.Entity.Trip", "Trip")
                        .WithMany("TripMembers")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TRIPMEMBER_TRIP");

                    b.Navigation("Account");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("EzBill.Domain.Entity.Account", b =>
                {
                    b.Navigation("Event_Use");

                    b.Navigation("Events");

                    b.Navigation("PaymentHistoriesFrom");

                    b.Navigation("PaymentHistoriesTo");

                    b.Navigation("SettlementsFrom");

                    b.Navigation("SettlementsTo");

                    b.Navigation("TaxRefund_Usages");

                    b.Navigation("TaxRefunds");

                    b.Navigation("Trip");

                    b.Navigation("TripMembers");
                });

            modelBuilder.Entity("EzBill.Domain.Entity.Event", b =>
                {
                    b.Navigation("Event_Use");

                    b.Navigation("TaxRefunds");
                });

            modelBuilder.Entity("EzBill.Domain.Entity.TaxRefund", b =>
                {
                    b.Navigation("TaxRefund_Usages");
                });

            modelBuilder.Entity("EzBill.Domain.Entity.Trip", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("PaymentHistories");

                    b.Navigation("Settlements");

                    b.Navigation("TripMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
